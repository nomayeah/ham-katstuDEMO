<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <link rel="stylesheet" href="{{ asset('css/tech.css') }}">
</head>
<body>
<div class="markdown"><div class="lesson-num p">Lesson1</div><h1 id="overview">フロントエンドの概要
</h1>
<section id="chapter-1"><h2 class="index">1. はじめに
</h2><div class="subsection"><p>フロントエンドの世界へようこそ！ フロントエンドはWebサイトの見た目や操作性といったユーザーと直接関わる部分で、欠かすことのできない重要な要素です。長年のWeb業界の進歩のおかげでフロントエンドの表現力がめざましい進歩を遂げ、綺麗なサイトやかっこいいエフェクトなどが簡単に作れるようになり、アイデアさえあれば大抵のことは実現できる環境が整っています。フロントエンドを学ぶには絶好のタイミングです。</p>

<p>フロントエンド制作は、頭の中にあるアイデアをブラウザ上で実際に動くように命を吹き込む作業です。しかし時代の進歩とともにユーザーの感度が高くなった今、ただ単に技術を学べばよいというものではありません。ユーザーの立場で使いやすいサイトとはどういうものかを考えながら、PCやスマートフォンなどあらゆる端末で使いやすいサイトを作ることが求められます。こうした細部までの配慮はすべての人ができるものではありませんが、本コースで学ぶツールを正しく使えば比較的簡単に行うことができます。効率よくツールを使うことのできるフロントエンドエンジニアは大変重宝されます。</p>

<p>本レッスンではフロントエンドの歴史をたどりながら、フロントエンドとは何なのかを探っていきましょう。そしてWebサイト制作の流れを把握して、フロントエンドエンジニアの役割を学んでいきます。</p>
</div></section><section id="chapter-2"><h2 class="index">2. フロントエンドとは
</h2><div class="subsection"><p>Webサイトはフロントエンドとバックエンドから成り立っています。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/frontend/overview/1-frontend-backend.png" alt="フロントエンドとバックエンドが連携してWebサイトが動く"></p>
</div><div class="subsection"><h3 class="index" id="chapter-2-1">2.1 フロントエンドの役割
</h3><p>フロントエンドとは、ユーザーと直接やり取りする部分で、Webブラウザ上に表示される<strong>見た目</strong>、つまりお客さんから見える舞台です。Webサイトのレイアウトや、メニュー、ボタン、更にはアニメーションなどをブラウザ上で実際に動くように作るのがフロントエンドエンジニアの役割です。</p>

<p>フロントエンドエンジニアは、Webサイトを訪れたユーザーの反応を大事にし、ユーザーにとってより良いWebサイトを作っていく必要があります。</p>

<p>そのためHTML/CSS/JavaScriptというフロントエンド技術をしっかりと理解し、応用力を高めなければいけません。デザイナーが提案したイメージをしっかりと吟味し、Webページとして実装できる技術を身に付けましょう。</p>
</div><div class="subsection"><h3 class="index" id="chapter-2-2">2.2 バックエンドの役割
</h3><p>バックエンドとは、ユーザから直接見ることのできない<strong>裏方</strong>、つまり舞台裏です。<strong>サーバサイド</strong>とも呼ばれます。チャットサイトであれば、発言内容をデータベースに保存したり、発言内容を他のユーザーに転送するのがバックエンドの役割です。</p>

<p>例えば、ショッピングサイトで気に入った商品を買うときに「購入」ボタンをクリックします。ユーザーが気持ちよく「購入」ボタンをクリックするまではフロントエンドの役目ですが、商品が購入された旨のメールを送ったり、ちゃんと届くように住所や名前をデータベースに登録するのはバックエンドの仕事です。</p>

<p>バックエンドは色々な言語で作ることができ、PHPやRuby、Javaなどがよく使われています。このコースではCloud9やFirebaseがバックエンドエンジニアの代わりとなってくれますので、私たちが作る必要はありません。</p>
</div></section><section id="chapter-3"><h2 class="index">3. フロントエンドの歴史
</h2><div class="subsection"><h3 class="index" id="chapter-3-1">3.1 Web黎明期
</h3><p>2000年代前半までは、ほとんどのページがHTMLという1つの言語だけで作られていました。文字の大きさや色を変えたりといった装飾的な機能も今ほどは充実してはおらず、HTMLに備わっているわずかな機能だけを利用して作られていました。</p>

<p>それまでは文書構造も見た目もすべてHTMLで構成されていましたが、文書構造はHTMLで作り、CSSで見た目を決める、というように目的別に技術を使い分ける動きが広がりました。その背景には、CSSを併用する方が表現の幅が広かったという理由もあります。その頃のJavaScriptは今よりできることが限られており、処理速度も遅かったため、ページに少し機能を追加するなど限定的にしか使われていませんでした。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-2">3.2 Ajaxの広まり
</h3><p>補助的機能としての存在でしかなかったJavaScriptが、2000年代後半から徐々に脚光を浴びるようになりました。ページを表示したままサーバーと通信して新しい情報を表示していくAjaxという手法が編み出され、<a href="https://maps.google.co.jp/" target="_blank">Googleマップ</a>（2005年）などで大々的に使われたのをきっかけに、他のサイトも追随してAjaxを多用し始めました。</p>

<p>2006年頃から、それまではデスクトップアプリでしか存在しなかったものが徐々にブラウザ上で動くWebアプリとして実装されていきます。代表的なものがMicrosoft Excelに対しての<a href="https://www.google.com/intl/ja_jp/sheets/about/" target="_blank">Googleスプレッドシート</a>)や、Microsoft Wordに対しての<a href="https://www.google.co.jp/intl/ja/docs/about/" target="_blank">Googleドキュメント</a>です。まだ機能は乏しかったものの、ブラウザ上で様々な事ができる可能性を世の中に示しました。</p>

<p>Ajaxについては、Lesson7 Web APIで学びます。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-3">3.3 jQueryの登場
</h3><p>2005年に生まれたjQueryはAjaxとともに開発者の間に広まり、JavaScriptによる開発のハードルをぐっと下げました。当時はInternet ExplorerやFirefoxなど各ブラウザによってJavaScriptの仕様が大きく異なり、ブラウザごとに仕様を調べてコードを書かなければならず大変な労力でしたが、jQueryはその差異を吸収してくれ、ブラウザ間の違いを意識することなく開発できる環境が整ってきました。jQueryを使ったコードは使わないコードに比べて非常に読みやすく、メンテナンスも簡単です。</p>

<p>jQueryは当時まだ目新しかったエフェクトやアニメーションの機能も搭載しており、さらにプラグインの仕組みによって様々な機能を追加できるようになっていたためWeb業界における大ヒットとなりました。静的なWebページの時代から動的なコンテンツがメインの「Web 2.0」への変化の波に乗って、jQueryはWeb制作における必須ツールとしての地位を確立しました。</p>

<p>jQueryはLesson4で詳細を学びます。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-4">3.4 Flashの繁栄
</h3><p>表現力の点ではHTML/CSS/JavaScriptにはまだ限界がありました。Web黎明期から存在していたJavaアプレットはプログラミング環境も充実しており大変多くの事ができましたが、あまりにも処理が重く、2000年代後半の時点ではすでにほとんど使われていませんでした。その代わりに表現力を発揮するツールとしての地位を確立したのがAdobe社のFlashです。</p>

<p>今でこそHTML5で動画を再生できるようになりましたが、当時はブラウザ上で動画を再生するにはFlash Playerが必要でした。それまでもアニメーションの表現力の高さと動作の軽快さから注目を集めていたFlashでしたが、YouTube（2005年）をきっかけとしてWeb上でのマルチメディアの利用が広まり、Flashでしか実現できないことの多さや、またFlashの開発ツールの使いやすさも相まって、多くのサイトがFlashを使うようになりました。</p>

<p>ただFlashにも欠点はありました。Flashを多用したサイトは重くなりがちなこと、Webの標準技術とは全く異なる仕組みのためユーザビリティが劣りがちなこと、そしてプラグインという仕組みのためセキュリティ上の脆弱性が生まれやすいことは以前から指摘されていました。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-5">3.5 FlashからHTML/CSS/JavaScriptへの回帰
</h3><p>2007年にアメリカでiPhoneが登場し、翌2008年に日本でも発売され、それまでシンプルな表示しかできなかった携帯電話（通称ガラケー）から、パソコンに匹敵する機能を備えたスマートフォンへと時代の変化が始まりましたが、iPhoneにFlashは搭載されませんでした。当時のモバイル端末で動かすにはFlashは重すぎたというのが大きな理由の一つです。</p>

<p>また、AndroidのスマートフォンではFlashが動く端末もありましたが、動作が重くバッテリーの消費が激しかったり、タッチ操作に対応していないFlashコンテンツが多いなどあまり実用的ではありませんでした。Flashの内部仕様は非公開なため、端末メーカーが独自に改良を施すことも不可能でした。</p>

<p>その結果、多くのWebサイトがFlashを捨ててHTML/CSS/JavaScriptというWebの標準技術に回帰し始め、2010年頃からその傾向が顕著になりました。この頃にはすでにHTML/CSS/JavaScriptを使ってできることがかなり増えており、Flashを使わなくても多くのことが実現できました。</p>

<p>Flashが衰退するすき間を埋めるようにJavaScriptの存在価値はさらに増しました。JavaScriptは仕様が公開されており各ブラウザが標準でサポートしているため、今後も長期にわたって使える可能性が非常に高いです。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-6">3.6 Bootstrapとスマートフォンの普及
</h3><p>米Twitter社が自社のサイト制作に使っているCSSを<strong>Bootstrap</strong>という名前で2011年に公開しました。Twitterほどの大きなサイトを制作できるような広範囲の部品群が含まれており、一流のデザイナーがTwitter向けに制作したデザインのガイドラインや綺麗なボタンなどを、誰でも簡単な手順で自分のサイトに適用できるようになりました。デザインに明るくないエンジニアでもBootstrapを使えば綺麗で整ったサイトをすぐ作れるため、その手軽さからBootstrapは大変ヒットしました。</p>

<p>今やPCよりもスマートフォンでWebにアクセスするユーザーの方が多数派となりました。かつてはデスクトップ版とモバイル版でサイトを分ける手法が一般的でしたが、1つのページで多種多様な画面サイズに対応できる<strong>レスポンシブデザイン</strong>が現在の主流です。</p>

<p>Bootstrapでもレスポンシブデザインが採用され、どんな画面サイズで見ても統一感のあるページを簡単に作ることができます。BootstrapとレスポンシブデザインはLesson 5、6で学びます。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-7">3.7 HTML5とCSS3の活用
</h3><p><strong>HTML5</strong>や<strong>CSS3</strong>といった新しい仕様をブラウザが徐々にサポートし、それまでFlashやJavaScriptに頼っていた動画表示や簡単なアニメーションなどをHTMLとCSSだけで行えるようになりました。2015年にはYouTubeの標準プレイヤーがFlashからHTML5へと変わりました。</p>

<p>CSSによるアニメーションはJavaScriptよりも動作が軽く、開発も容易なため、CSSでできることはできるだけCSSで行い、装飾的な部分についてはJavaScriptの使用を減らすというのが最近のトレンドです。CSSを使った簡単なアニメーションの作り方はLesson 6で学びます。</p>

<p>スマートフォンのアプリストアから入手できるネイティブアプリの利用が増えていますが、ネイティブアプリとWebサイトはそれぞれ向き不向きがあります。ネイティブアプリはスマートフォンの機能をフルに使うことができ、ユーザーから見て身近な存在なので、毎日頻繁に使うツールに向いています。一方、Webサイトはプラットフォームに限定されず幅広い環境から利用でき、インストールも不要なので、検索してすぐに情報にたどり着けるという利点があります。ネイティブアプリ開発はプラットフォームのルールに従わなければならないため若干ハードルが高めですが、Webサイトは誰でもすぐに始められるほど敷居の低いものです。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-8">3.8 Node.jsをはじめとした開発環境の発展
</h3><p>2010年頃から爆発的な広がりを見せたNode.jsによって、JavaScriptがサーバサイドやデスクトップアプリなどあらゆる所で広く使われるようになり、それに乗っかるようにフロントエンドの開発環境もますます進化しています。便利なツールも数多く出てきていますので、本コースを修了して開発に慣れてきたらぜひ色々探して使ってみましょう。</p>
</div></section><section id="chapter-4"><h2 class="index">4. Webサイト制作の流れ
</h2><div class="subsection"><p>Web制作会社がWebサイトを受注して制作する際の流れは一般的に以下のようになります。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-1">4.1 登場人物
</h3><p>大まかに分けて4種類の人が登場します。</p>

<ul>
  <li>ディレクター：サイトの内容を考えたりチーム全体をまとめる監督役</li>
  <li>デザイナー：UIを設計し、レイアウトや配色などサイトの見た目を決定して完成イメージを作る</li>
  <li>フロントエンドエンジニア：完成イメージを元に、ブラウザ上で実際に動くよう実装する</li>
  <li>バックエンドエンジニア：データベースとの連携など、フロントエンドだけでは実現できない機能を実装する</li>
</ul>

<p>大きなプロジェクトの場合、デザインの基本となるガイドラインをアートディレクターが作成し、それに従ってデザイナーが細部を作成するという風に役割が分かれている場合もあります。また、デザイナーとフロントエンドエンジニアを同じ人が兼ねたり、フロントエンドとバックエンドを同じ人が実装したりなど、多様なチーム構成があります。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-2">4.2 企画・要件定義
</h3><p>ディレクターが主体となってクライアントにヒアリングを行い、どんな情報を載せたいか、どんな機能を実装したいかを洗い出します。このプロセスを<strong>要件定義</strong>と呼びます。クライアントにとって何が目的で、何を実装するのが重要かというところを明確にします。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/frontend/overview/1-webdev-concept.png" alt="要件定義"></p>
</div><div class="subsection"><h3 class="index" id="chapter-4-3">4.3 サイト設計・ワイヤーフレーム制作
</h3><p>要件を元にディレクターやデザイナーが主体となってサイトの骨組みを考えます。サイトのページ構成や、各ページにどんな機能を持たせるかを決めます。この時に作るラフスケッチを<strong>ワイヤーフレーム</strong>と呼びます。</p>

<p>ワイヤーフレームは制作上のコミュニケーションが目的なので手書きで作っても構いませんし、<a href="https://cacoo.com/lang/ja/home" target="_blank">Cacoo</a>などのWebサービスを使って作ることもできます。</p>

<p>ワイヤーフレームをクライアントに確認してもらい、問題なければ次のステップに進みます。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/frontend/overview/1-webdev-wireframe.png" alt="ワイヤーフレーム"></p>
</div><div class="subsection"><h3 class="index" id="chapter-4-4">4.4 カンプ制作
</h3><p>ワイヤーフレームを元にデザイナーが各ページの完成形の見本を作ります。仕上がり状態の見た目をページごとに一枚の画像として作ります。この画像のことを<strong>カンプ</strong>と呼びます。画像なのでボタンやリンクをクリックしても反応しません。カンプを作るためのソフトとしては<a href="https://www.sketchapp.com/" target="_blank">Sketch</a>や<a href="http://www.adobe.com/jp/products/photoshop.html" target="_blank">Photoshop</a>、<a href="http://www.adobe.com/jp/products/illustrator.html" target="_blank">Illustrator</a>などがよく使われています。</p>

<p>完成版のデザインであるカンプをクライアントに確認してもらい、問題がなければ次のステップに進みます。</p>

<p>大きなプロジェクトの場合はカンプを作成することがほとんどですが、規模が小さな場合やチーム構成によってはカンプ作成を行わずに次の段階に進むこともあります。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/frontend/overview/1-webdev-comp.png" alt="カンプ"></p>
</div><div class="subsection"><h3 class="index" id="chapter-4-5">4.5 プロトタイプ制作
</h3><p>カンプ画像を使って、クリックなどの操作に反応する紙芝居のようなものを作ります。これを<strong>プロトタイプ</strong>と呼びます。プロトタイプは実際にブラウザ上で動き、エフェクトやアニメーションなども盛り込まれるので、実際のユーザーと同じ感覚でサイトを眺めることができます。中身の機能はまだできておらず、あくまで使い勝手が良いかどうかを確認するためのものです。プロトタイプを作るためのツールとしては<a href="https://prottapp.com/ja/" target="_blank">Prott</a>や<a href="https://www.invisionapp.com/" target="_blank">InVision</a>などがあります。</p>

<p>Web制作に詳しくないクライアントでもプロトタイプを見れば完成形を具体的にイメージできるので、コーディングに入る前の最終確認としても有用です。プロジェクトによってはプロトタイプ作成を行わずにコーディングに入ることもあります。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/frontend/overview/1-webdev-prototype.png" alt="プロトタイプ"></p>
</div><div class="subsection"><h3 class="index" id="chapter-4-6">4.6 コーディング（実装）
</h3><p>デザイナーが作った素材を元に、フロントエンドエンジニアがHTML、CSS、JavaScriptを駆使して実際にブラウザ上で動くよう実装していきます。この作業を<strong>コーディング</strong>と呼びます。</p>

<p>サーバサイド処理が必要な場合はバックエンドエンジニアが並行して開発を行い、フロントエンドエンジニアと連携してつなぎ込みを行います。</p>

<p>コーディングによってサイトの各機能が完成していきます。コーディングによって実装された制作物を<strong>ソースコード</strong>と呼びます。ブラウザでお好きなサイトを開いて右クリックして「ページのソースを表示」で表示されるものがソースコードです。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/frontend/overview/1-webdev-coding.png" alt="コーディング"></p>
</div><div class="subsection"><h3 class="index" id="chapter-4-7">4.7 テスト
</h3><p>完成版の本物のサイトを<strong>本番環境</strong>や<strong>本番サイト</strong>と呼びますが、本番とほぼ同等のテストサイトを用意して、不具合がないかどうかすべての機能をチェックし、クライアントと一緒に最終確認を行います。テストサイトは無関係の人にアクセスされないよう、パスワードなどでアクセス制限をかけます。</p>

<p>テストの結果、問題があればコーディングに戻って修正します。問題がなければ本番公開に進みます。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-8">4.8 公開
</h3><p>ソースコードや画像など一式を本番環境にアップロードして公開すればWebサイトの完成です。</p>

<p>本コースの受講生は、さくらレンタルサーバを3ヶ月間無料で使用できるので是非ともオリジナルサイトを完成させ、公開しましょう！</p>
</div></section><section id="chapter-5"><h2 class="index">5. 本コースについて
</h2><div class="subsection"><h3 class="index" id="chapter-5-1">5.1 本コースで目指すフロントエンドエンジニア
</h3><p>本コースでは、まずはフロントエンドエンジニアとして必要不可欠な基礎技術を仕組みから理解していきます。最初はWebサイトの最も基礎部分のHTML/CSSから学びます。更に、フロントエンドエンジニアとして最も大切なプログラミング言語であるJavaScriptをしっかりと学びます。HTML/CSS/JavaScriptをしっかり基礎固めしておけば、更に高度なフロントエンド技術も理解することができるようになります。</p>

<p>基礎的な技術を学び終えると、応用技術を学びます。jQueryを利用したDOM操作や、Ajaxを利用したデータ通信、Bootstrapを利用した効率的なページレイアウトやレスポンシブデザイン対応などを学んでいきます。更に、FirebaseというGoogleが運営しているバックエンドサービスを利用して、リアルタイムチャットサービスを作成します。最後にJavaScript製フレームワークであるVue.jsを使って、ここまでに学んだサンプルコードをVue.jsで置き換えることで、Vue.jsの利便性を体験してもらいます。</p>

<p>本コースを修了すると、全くの初心者からフロントエンドエンジニアとして名乗れるようになります。是非最後まで進めるように頑張っていきましょう。躓くようなことがあれば、メンターを頼ってどんどん進めてオリジナルサービスを完成させましょう！</p>
</div><div class="subsection"><h3 class="index" id="chapter-5-2">5.2 以降のレッスンの概略
</h3><p>以降のレッスンから本格的にフロントエンド技術について学んでいくことになります。</p>

<p>Lesson2 HTML/CSS, Lesson3 JavaScriptはフロントエンドの最も基礎的な技術です。Webサイトのフロントエンドはこれら3つの技術で作られており、まずはしっかりと基礎を固めておきましょう。</p>

<p>次に、Lesson4 jQuery, Lesson5 Bootstrap, Lesson6 外部ライブラリでは、基礎技術(HTML/CSS/JavaScript)をより便利に使いやすくしたライブラリ（便利機能の寄せ集め）について学びます。これらを利用して、Webサイト制作を効率化していきます。便利なものは使っていきましょう。</p>

<p>そして、Lesson7 Web API(Flickr API), Lesson8 BaaS(Firebase)では、バックエンドサービスが提供してくれるデータをJavaScript/jQuery(Ajax)で通信する手法を学びます。Web APIを利用すると、いくつかのWeb APIを利用したり、組み合わせることで簡単にオリジナルサービスを作ることができます。また、FirebaseのようなBaaSを利用すると、フロントエンドだけでなくバックエンド（データの保存が主な用途）を利用して、リアルタイムチャットやSNSサービスを手軽に作成することもできます。</p>

<p>最後にはいよいよオリジナルサービスを作っていきましょう。ここでは、オリジナルサービス制作に役立つ情報を載せてます。さくらサーバでの公開方法や、一般向けに提供されているWeb APIの一覧、便利な外部ライブラリなどを紹介しています。</p>

<p>Lesson10では、更に学びたい人向けにフロントエンドの簡単な技術紹介を載せています。フロントエンド技術には様々な技術があります。このコースの受講が終わったあとに、今後学んでいきたい分野の参考材料としてください。</p>
</div></section><section id="chapter-6"><h2 class="index">6. まとめ
</h2><div class="subsection"><p>フロントエンドの概要は把握して頂けたでしょうか。まだよくわからなくても心配しないでください。次のレッスン以降で実際に手を動かしていけば徐々に理解できると思います。フロントエンドの学習は、教科書を読んで頭で理解することよりも実際に手を動かして感覚で理解していくことが大事です。どうぞ次のレッスンに進んでください！</p>
</div></section></div>
</body>
</html>