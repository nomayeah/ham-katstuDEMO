<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <link rel="stylesheet" href="{{ asset('css/tech.css') }}">
</head>
<body>
<div class="markdown"><div class="lesson-num p">Lesson1</div><h1 id="overview">Webアプリケーション開発のために学ぶこと</h1>
<section id="chapter-1"><h2 class="index">1. 学習の目標</h2><div class="subsection"><p>本コースのゴールは、 PHP/Laravel を使用してオリジナルのWebアプリケーション（Webサービス）を開発することです。Web アプリケーションは、簡単に言うと <strong>Web 上で操作できるソフトウェア</strong> のことです。皆さんが利用している SNS(Twitter, Facebook)などが代表的な Web アプリケーションです。</p>

<p>このレッスンでは、Webアプリケーションを開発する上で必要な学習項目、ならびに本コース全体の構成についてお話しします。本コースで目指すところと、構成について把握をして、先のレッスンに進みましょう。</p>
</div></section><section id="chapter-2"><h2 class="index">2. Webアプリケーションとは何か</h2><div class="subsection"><h3 class="index" id="chapter-2-1">2.1 Webアプリケーションを使うにはWebブラウザが必要</h3><p>TwitterやFacebookを思い出してください。これらをPCで利用する場合、<strong>Webブラウザ</strong> が必要です。Webブラウザは皆さんが普段使用するスマートフォンやPCに必ず最初からインストールされています。たとえばWindowsならEdge、MacやiPhoneならSafariです。もちろん、ChromeやFirefoxなどの好きなブラウザをインストールして使うこともできます。</p>

<p>Webブラウザを使うだけで、誰もが手軽にWeb上のコンテンツへアクセスすることができます。「Windowsでしか利用できない」といったことは、ほとんどありません。</p>

<p>つまり、<strong>Web上でアプリケーションを公開すれば、世界中の誰もが、あなたの作ったアプリケーションを手軽に利用できるようになる</strong> のです。</p>
</div><div class="subsection"><h3 class="index" id="chapter-2-2">2.2 Webとは何か</h3><p>そもそも <strong>Web（ウェブ）</strong> とは何でしょうか。</p>

<p>webという言葉は元々「クモの巣」という意味です。「Webアプリケーション」や「Web上のコンテンツ」と言う場合の「Web」は、通常 <strong>ワールドワイドウェブ</strong>（World Wide Web：WWW）という意味合いで用いられます。World Wide Webという言葉のイメージは「情報が世界中（World Wide）にクモの巣（Web）のように張り巡らされている状態」であり、それを実現するために使われているのがインターネットです。</p>

<p>簡単に言うなら、Webは「インターネット上にあるモノ」だという認識で構いません。</p>
</div><div class="subsection"><h3 class="index" id="chapter-2-3">2.3 インターネットとは何か</h3><p>では、インターネットは結局のところ、どういうものなのでしょうか。</p>

<p>現在多くの人達にとって、インターネットは生活に不可欠な存在となっています。ブログを読み、Webサービスを使ったビジネスをし、検索サイトやニュースサイトで情報を集め、友達とチャットをし、SNSに写真を投稿・・・。国内だけに留まらず、海外のローカル情報でさえも探し出すことも可能です。</p>

<p>インターネットとは「ネットワーク間のネットワーク」という意味として名付けられました。ネットワークとネットワークが繋がったことで、今やインターネットは全世界を繋げる巨大なネットワークとなっています。</p>

<p>ここでいうネットワークは、一種の組織だと思ってください。コンピュータとコンピュータが繋がれば、それはネットワーク（組織）になります。家庭内や会社内でコンピュータ同士を繋げることでネットワーク組織を構成し、通信事業者が家庭や会社のネットワーク組織を “更に” 大きなネットワーク組織としてまとめあげます。最後には、通信事業者同士を繋げることで、現在のインターネットが構成されました。</p>

<p>インターネットに繋がっているコンピュータは、全てのコンピュータ同士が物理的に繋がっています。コンピュータからコンピュータまで、どれだけ長い距離（例えば海外）であろうと、なんらかの形で繋がっています。電線やケーブルによって有線で繋がっている場合や、無線による電波で繋がっている場合もあります。</p>

<p>皆さんが <strong>Webサイトを閲覧したりWebアプリケーションを利用できるのは、インターネットに繋がっているコンピュータが自分のWebサイトやWebアプリケーションを公開しているから</strong> です。</p>
</div><div class="subsection"><h3 class="index" id="chapter-2-4">2.4 Webアプリケーションを作るとはどういうことか</h3><p>本コースで学習してもらうWebアプリケーション開発のカリキュラムは、 <strong>誰もがWebブラウザで利用できるアプリケーションを PHP/Laravel で構築し、完成したものをWebへ公開する</strong> ことを目指してもらうために用意しています。</p>

<p>そのゴールへ到達するには、多くの知識が必要です。以降のセクションで「どのような知識が必要か」について触れていきますが、先に「どうしてWebページを閲覧できるのか」をテーマに、コンピュータ間の通信について技術的に深掘りしていきます。</p>
</div></section><section id="chapter-3"><h2 class="index">3. Webアプリケーションと利用者間の通信の仕組み</h2><div class="subsection"><h3 class="index" id="chapter-3-1">3.1 リクエストとレスポンス</h3><h4>コンピュータもお客と店員のように会話する</h4>

<p>コンピュータ同士の通信は、お客さんと店員のやり取りに似ています。お客さんは店員に要求し、店員はその要求に対して応えます。例えば、飲食店では、お客さんは「注文いいですか？ハンバーグ定食を1つください」と要求します。そして店員はお客さんに少し待ってもらって、シェフに料理を頼み、料理が完成すると、「お待たせしました。ハンバーグ定食です。」と言って料理を渡します。</p>

<h4>クライアントとサーバのリクエストとレスポンス</h4>

<p>コンピュータ同士の通信も全く同じです。情報を要求する側のコンピュータがいて、それに応答する側のコンピュータがいます。このとき、要求する側のコンピュータを <strong>クライアント</strong> と呼び、応答する側のコンピュータを <strong>サーバ</strong> と呼びます。そして、コンピュータがコンピュータに情報を要求することを <strong>リクエスト</strong> と呼び、それに対して返事をすることを <strong>レスポンス</strong> と呼びます。</p>

<p>この通信方式を <strong>クライアント／サーバ モデル</strong> と呼びます。コンピュータ通信のほとんどはこの クライアント／サーバ モデル によって成り立っています。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/first-programming/internet/4-1.png" alt=""></p>

<h4>クライアント／サーバの役割はソフトウェアで決まる</h4>

<p>クライアント／サーバモデルはコンピュータ同士の通信モデルだと言いましたが、細かく見ていくと、実際には <strong>ソフトウェア同士の通信モデル</strong> です。コンピュータ自体はソフトウェアを動作させているだけであり、ソフトウェア無しに通信することはありません。（※ここで言う「ソフトウェア」はコンピュータにインストールして使うものを指していて、「アプリケーション」という言葉と意味は同じです。）</p>

<p>Webアプリケーションを例に考えてみましょう。クライアントの側でWebアプリケーションを表示するために必要なソフトウェアはWebブラウザでした。Webブラウザは「○○のページが見たい」という要求（リクエスト）をサーバに対して出すことができます。</p>

<p>Webブラウザがクライアントソフトウェアなのに対して、Webサーバはサーバソフトウェアです。Webサーバは、Webブラウザなどのクライアントソフトウェアから出される「○○のページが見たい」という要求に対して、「要求されたページを返す」というサービスを提供（レスポンス）します。</p>

<p>繰り返しますが、コンピュータ自身にクライアントかサーバかの区別はありません。どちらも性能の差はあれ、ただの機械です。コンピュータがクライアントとして振る舞うか、サーバとして振る舞うかは、起動しているソフトウェアによって決まります。コンピュータの振る舞いを決めるのはソフトウェアだと肝に銘じておきましょう。例えば、サーバ用の高性能なコンピュータであっても、クライアント用途のソフトウェアをインストールして使用すれば、クライアントとして振る舞います。</p>

<p>また、クライアントとサーバはソフトウェアであるため、1台のコンピュータの中で同時にクライアントソフトウェアとサーバソフトウェアの両方を起動することもできます。ここでは、1台のコンピュータにはクライアントソフトウェアかサーバソフトウェアのどちらかだけが起動していると考えたほうが理解しやすいでしょう。</p>

<h4>WebブラウザによるリクエストとWebサーバによるレスポンス</h4>

<p>パソコンやスマートフォンからWebブラウザを起動すると、ホームページが表示されます。ホームページの本来の意味は、Webブラウザが最初に表示するページのことです。ホームページとしてGoogleやYahoo!のような検索サイトを登録している方が多いかと思います。そして、適当なキーワードで検索すると、検索結果一覧が表示されます。表示された検索結果一覧には特定のページのURLを設定したリンクが表示されており、リンクをクリックすると該当のページへアクセス（Webブラウザがページの内容を表示）します。</p>

<p>これらの流れを一般化して説明します。Webブラウザが何らかのURLへアクセスしたとき、そのURLへ向けてリクエストを送ります。送り先は、指定されたURLにあるWebサーバです。Webサーバはリクエストを受け取り、それに対応したレスポンス（Webページ）を返します。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/first-programming/internet/4-5.png" alt=""><br>
<em>WebブラウザとWebサーバの通信（HTTPは次のチャプターにて解説）</em></p>

<p><strong>URLへアクセスし、Webページが表示される</strong>までにかかる時間は、たいてい数秒以内です。</p>
</div><div class="subsection"><h3 class="index" id="chapter-3-2">3.2 HTTPプロトコル</h3><p>皆さんは <code>http://www.yahoo.co.jp/</code> というURLを見て、<code>http</code>とは何だろうかと考えたことはありますか？この<code>http</code>とは、<strong>HTTPという通信プロトコルを用いるよ</strong> と宣言しているのです。<code>http://www.yahoo.co.jp/</code> は、HTTPを用いて、<code>www.yahoo.co.jp</code> と通信するよと宣言しているのです。</p>

<p>プロトコル(protocol)とは、<strong>規約（取り決め、約束事）</strong> のことで、通信プロトコルはコンピュータがお互いに通信をするための規約になります。インターネットに限らず、コンピュータ同士が通信する場合には何らかの取り決めが必要です。このプロトコル（取り決め）の考え方は、文字コードなどの場合と同じです。お互いが通信するときに、別々の通信プロトコルを使っていては「どういうデータを送受信しているのか」お互いわからない状態（文字化けと似た状態）になります。例えるなら、日本語しか理解できない人が、英語しか理解できない人を相手に、一方的に日本語を話すようなものです。お互い同じプロトコルを使うということは、人間が同じ言語を使って話すという前提（約束事）に似ています。</p>

<p>そして、HTTPとは、Hypertext Transfer Protocol（ハイパーテキスト・トランスファー・プロトコル）の略で、ハイパーテキストのための通信プロトコルという意味になります。ハイパーテキストとは何かというと、HTMLのことです。HTMLはHypertext Markup Language（ハイパーテキスト マークアップ言語）の略称で、<code>HTML = Webページ</code> です。<strong>HTTPは、Webブラウザ（クライアント）とWebサーバ（サーバ）の間でHTMLなどのコンテンツの送受信のために用いられる通信プロトコル</strong> です。</p>

<p>また、<code>https://...</code>というURLも見かけます。HTTPSとは、HTTPでのデータ送受信の際に、全ての通信データを <strong>通信相手以外は読み取り不可（暗号化）</strong> してセキュリティを担保するための通信プロトコルです。HTTPSのSがSecure（セキュア）の略であるとおり、Web上で個人情報やパスワードを通信する際に、第三者に読み取られないようにするためのものです。パスワードを入力させるWebアプリケーションを一般公開させる際は、必ずHTTPSを用いて通信データを暗号化しましょう。パスワードを入れるのに暗号化されていない通信プロトコルであるHTTPのURLになっているWebアプリケーションの一般公開は、セキュリティ的に問題が生じるので、気をつけてください。</p>
</div></section><section id="chapter-4"><h2 class="index">4. Webアプリケーション開発に必要な知識</h2><div class="subsection"><p>以下のサイトは、本コースで皆さんが構築することになるWebアプリケーションのひとつ「メッセージボード」のデモです。このWebアプリケーションは「新規メッセージの投稿」フォームから書き込んで送信した内容をトップページで一覧表示する仕組みになっています。</p>

<p><a href="http://laravel-message-board.herokuapp.com/">http://laravel-message-board.herokuapp.com</a></p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/webapp/overview/message_board_01.png" alt="message_board_01.png"></p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/webapp/overview/message_board_02.png" alt="message_board_02.png"></p>

<p>上記のURLにアクセスすることで、私たちはWebに公開された「デモのWebアプリケーション」を利用することができます。また、アクセスすると、画像のようなデザインの画面がWebブラウザに表示されます。</p>

<p>このようなWebアプリケーションを開発してWebに公開するためには、どのような知識が必要になるのでしょうか。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-1">4.1 HTMLとCSS</h3><p>この画面は何らかのツールでイメージ図を描いて、それをそのままWebに公開しているのではありません。<strong>一定のルールに基づいて記述されたテキスト文書をWebブラウザが解釈して、このようなデザインの画面を表示している</strong> のです。この画面がどのようなテキスト文書で記述されているかは、Chromeではページの適当な余白の部分を右クリック→「ページのソースを表示」のメニューを選択すれば閲覧できます。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/webapp/overview/message_board_03.png" alt="message_board_03.png"></p>

<p>ページのソースを表示すると、以下のような内容が表示されます。（下記のイメージと異なる部分があっても気にしないで見てください。）</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/webapp/overview/message_board_04.png" alt="message_board_04.png"></p>

<p>全体を眺めると、沢山の <code>&lt;</code> と <code>&gt;</code> で囲ったもので記述されています。これがWebページの正体であり、Webブラウザにデザインを解釈させるための「一定のルール」です。このような文書が、前のセクションでお話した <strong>HTML(HyperText Markup Language)</strong> と呼ばれるハイパーテキストの文書、そして <code>&lt;</code> と <code>&gt;</code> で囲ったもののことを <strong>タグ</strong> といいます。</p>

<p>なお、HTMLタグのみでHTML文書を作っても見栄えの良いサイトは作成できません。現代的なデザインを作成するには <strong>CSS(Cascading Style Sheets)</strong> と呼ばれるHTMLとは異なるルールに従ってデザインの内容を記述しなければなりません。下記はCSSの一例です。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/webapp/overview/message_board_05.png" alt="message_board_05.png"></p>

<p>Webアプリケーションを構築する上で、利用者が目で見ることになる画面を作るためにHTMLとCSSを学習する必要があります。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-2">4.2 Bootstrap</h3><p>HTMLおよびCSSは奥が深く、自分の力で素敵なデザインのサイトを作成するには多くの知識が必要です。</p>

<p>Webデザイナーを志望する方は深いところまで学ぶ必要がありますが、Webアプリケーション開発をしたい方（例：プログラマー）にとっては、プログラミングを学んでWebデザインも学ぶのは、非常に骨が折れます。</p>

<p>そこで、プログラミングの学習に重点を置けるよう、現代的なデザインの画面を用意できるツールがあります。それが <strong>Bootstrap</strong> です。先ほどのメッセージボードのデモサイトも、画面デザインはBootstrapを利用して作られています。</p>

<p>ただし、Bootstrapを使うためには、当然ですがBootstrapの使い方を学ぶ必要があります。また、Bootstrapを理解するためには基本的なHTMLとCSSの知識が必要です。といっても、Webアプリケーション開発に必要なHTML・CSS・Bootstrapの知識は、そこまで多くはありません。最低限、本コースのカリキュラムで触れている内容が理解できればOKです。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-3">4.3 PHPとLaravel</h3><p>変化の無いHTML文書に対するリクエストの場合、事前にHTML文書をファイルとして用意しておけば、あとはWebサーバソフトウェアが「リクエストのあったHTMLファイルをそのままレスポンスとして返す」仕事をするだけです。</p>

<p>しかし、メッセージボードのようなWebアプリケーションへリクエストがあった場合、メッセージボードへの投稿件数によって表示内容が変わるため、アクセスするごとに <strong>動的に</strong> 表示内容を用意する必要があります。それはWebサーバソフトウェアではなく <strong>アプリケーションサーバソフトウェア</strong> の仕事です。</p>

<p>アプリケーションサーバソフトウェアは、特定のプログラミング言語で作られたWebアプリケーションを動作させるためのソフトウェアです。本カリキュラムで学習するPHPにはPHPのアプリケーションサーバソフトウェアがあります（詳細は後のレッスンで紹介します）。WebアプリケーションのURLにリクエストがあると、アプリケーションサーバソフトウェアがリクエストを受け取り、Webアプリケーションの適切な機能が実行されます。その結果、Webアプリケーションが持つ各種データ（リソース）を盛り込んだ1つのHTML文書が作られます。そのHTML文書をレスポンスとして返します。メッセージボードのトップページの場合、Webアプリケーションは登録されたメッセージを一覧表の形式に整形して、HTML文書を作ります。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/laravel/message-board/webapp.png" alt=""></p>

<p>なお「リクエストを受け取りレスポンスを返す」という意味では、アプリケーションサーバソフトウェアはWebサーバソフトウェアとしての機能も持っていると言えます。Webサーバソフトウェアおよびアプリケーションサーバソフトウェアとして機能するツールのひとつが、PHPの持っているサーバソフトウェアの機能です。また、自力でWebアプリケーションの全ての機能を0から作るのは非常に骨が折れるので、フレームワークと呼ばれるツールを使ってWebアプリケーションを作るのが一般的です。PHPで使えるフレームワークのひとつがLaravelです。つまり、LaravelでWebアプリケーションを作るためには、PHPとLaravelの知識が必要です。</p>

<p><img src="https://techacademy.s3.amazonaws.com/bootcamp/laravel/message-board/laravel.png" alt=""></p>
</div><div class="subsection"><h3 class="index" id="chapter-4-4">4.4 MySQL</h3><p>先ほどの図に「データベースサーバ MySQL」という記述がありました。MySQLについて説明します。</p>

<p>メッセージボードでは、投稿されたメッセージを <strong>データベースサーバソフトウェア</strong> に保存します。テキスト形式のファイルに保存し、後でデータを取り出すことも可能ですが、多くのデータを管理・保存・取得するという観点ではデータベースサーバソフトウェアにデータを保存する方法がWebアプリケーションでは一般的です。</p>

<p>データベースサーバソフトウェアの中でも <strong>MySQL</strong> というソフトウェアは無料で使えて尚且つ多くのWebアプリケーションで採用されているので、本カリキュラムで構築するWebアプリケーションでもMySQLを使っています。</p>

<p>ただし、MySQLに限らず、データベースサーバソフトウェアとデータのやり取りを行うには <strong>SQL(Structured Query Language)</strong> と呼ばれる言語を使う必要があります。メッセージボードでも、トップページにアクセスすると、メッセージボードのWebアプリケーションは最初に「MySQLへSQLの命令を送る」ことを行います。SQLの命令を受け取ったMySQLは、命令を解釈して適切なデータをWebアプリケーションへ返します。データを受け取ったWebアプリケーションは、そのデータを一覧表の作成に利用して、作成したHTML文書（画面）をクライアントへレスポンスします。</p>

<p>Webアプリケーションで使うデータを管理するために、MySQLの使い方と最低限のSQLを学習することが必要です。</p>

<p>なお、Webサーバ（アプリケーションサーバ）とデータベースサーバは別のコンピュータにインストールする場合もありますが、学習用途でWebアプリケーションを作る上では、同じサーバコンピュータ上にソフトウェアをインストールする方法で構いません。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-5">4.5 Heroku</h3><p>せっかく作ったWebアプリケーションを誰にも見てもらえないのは面白くありません。全世界に向けてWebアプリケーションを公開するには、インターネットに繋がっているサーバ用のコンピュータにWebアプリケーションを格納し、公開する設定をサーバ用のコンピュータに行わなければなりません。</p>

<p>Cloud9で利用しているAWSでもWebアプリケーションを公開することは可能ですが、気づかないうちに多額の請求額が発生している事態になりやすいという欠点を持っています。</p>

<p>そこで本カリキュラムでは、制限はあるものの課金が発生することなく無料で利用できる <strong>Heroku</strong> というサーバレンタルのサービスでWebアプリケーションを公開する方法を学びます。先ほどのメッセージボードもHerokuで公開しているWebアプリケーションです。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-6">4.6 GitとGitHub</h3><p>サーバ用途のコンピュータにWebアプリケーションを格納することを <strong>デプロイ</strong> といいます。Herokuのサーバへデプロイするためには <strong>Git</strong> というツールを使う必要があります。</p>

<p>Gitは本来 <strong>バージョン管理</strong> をするためのツールです。簡単に言うとゲームのセーブ機能みたいなもので、ある時点でのWebアプリケーションの各ファイルについて、その状態を一括で保存し、さらにファイルの変更履歴を管理することができます。</p>

<p>作成しているWebアプリケーションの規模が大きくなってくると、色々な問題が発生します。たとえば、新しい機能をお試し感覚で作ってみようとして「うまくいかないから元に戻したい」となっても、手を入れたファイルを元に戻そうとするのは容易なことではなくなります。Gitを利用することで「この時点でのWebアプリケーションの状態に戻す」といったことが簡単にできてしまうのです。そういったメリットを考慮すると、Gitは現代のプログラミングにおいて必須の技術であると言えます。</p>

<p>セクションのタイトルに記載した <strong>GitHub</strong> はGitを利用したWebサービスです。基本的にWebアプリケーションのバージョン管理は、開発をしているコンピュータ上で行いますが、GitHubを利用することで別のコンピュータにWebアプリケーションの状態を保存することができます。開発用のコンピュータを買い換える、もしくは他者にWebアプリケーションのファイルを渡そうとする場合は、GitHubを使うと便利です。</p>

<p>本カリキュラムではGitとGitHubの使い方を学びます。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-7">4.7 ターミナル</h3><p>Cloud9でワークスペースを作成すると、AWSという空間に用意されたコンピュータが1台、あなたに与えられるというイメージで考えてください。与えられたコンピュータの操作はCloud9で行うことができますが、皆さんがお使いのMacやWindowsのコンピュータとは異なり、マウスでポインタ（矢印）を動かしてクリックで全ての操作が行えるようにはなっていません。Gitの操作やHerokuへのデプロイが、マウス操作のみで行えないことの一例です。これらの操作をするためには、Cloud9の右下部分に <strong>キーボードでコマンドを入力</strong> して、各種操作をしなければなりません。この部分は <strong>ターミナル</strong> やコマンドラインインターフェイスと呼ばれています。</p>

<p>本カリキュラムではターミナルを使ったコマンド操作についても学習します。</p>
</div><div class="subsection"><h3 class="index" id="chapter-4-8">4.8 ここまでのまとめ</h3><p>以上がWebアプリケーション開発で必要な知識です。項目が多く、圧倒されてしまった方もいるかもしれません。しかし、ブートキャンプの本カリキュラムでは、それらを全て網羅しています。160時間しっかりと学習を進めていければ、あなたはPHP/LaravelによるWebアプリケーション開発ができるようになります！</p>

<p>「どのような順序で160時間の学習を進めていくか」について、次のチャプターで紹介します。</p>
</div></section><section id="chapter-5"><h2 class="index">5. 本コースについて</h2><div class="subsection"><h3 class="index" id="chapter-5-1">5.1 本コースのレッスン構成</h3><p>全てのレッスンは、本コースのゴールであるオリジナルの Web アプリケーション開発のためにあります。</p>

<table>
  <thead>
    <tr>
      <th>レッスン番号</th>
      <th>レッスン名</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Lesson 00</td>
      <td>事前準備</td>
    </tr>
    <tr>
      <td>Lesson 01</td>
      <td>Webアプリケーション開発のために学ぶこと</td>
    </tr>
    <tr>
      <td>Lesson 02</td>
      <td>HTML/CSS</td>
    </tr>
    <tr>
      <td>Lesson 03</td>
      <td>Bootstrap</td>
    </tr>
    <tr>
      <td>Lesson 04</td>
      <td>ターミナル</td>
    </tr>
    <tr>
      <td>Lesson 05</td>
      <td>PHP その1</td>
    </tr>
    <tr>
      <td>Lesson 06</td>
      <td>PHP その2</td>
    </tr>
    <tr>
      <td>Lesson 07</td>
      <td>PHP その3</td>
    </tr>
    <tr>
      <td>Lesson 08</td>
      <td>PHP その4</td>
    </tr>
    <tr>
      <td>Lesson 09</td>
      <td>MySQL</td>
    </tr>
    <tr>
      <td>Lesson 10</td>
      <td>PHPとMySQLの連携</td>
    </tr>
    <tr>
      <td>Lesson 11</td>
      <td>Git/GitHub</td>
    </tr>
    <tr>
      <td>Lesson 12</td>
      <td>インターネット通信の仕組み</td>
    </tr>
    <tr>
      <td>Lesson 13</td>
      <td>メッセージボード</td>
    </tr>
    <tr>
      <td>Lesson 14</td>
      <td>Heroku</td>
    </tr>
    <tr>
      <td>Lesson 15</td>
      <td>Twitter クローン</td>
    </tr>
    <tr>
      <td>Lesson 16</td>
      <td>オリジナルサービス</td>
    </tr>
  </tbody>
</table>

<p>この中で Laravel で作成する Web アプリケーションの成果物は、</p>

<ul>
  <li>メッセージボード</li>
  <li>Twitter クローン</li>
  <li>オリジナルサービス</li>
</ul>

<p>の3つです。</p>

<p>最初の2つは、教材の中でチュートリアル形式で作り上げていきます。最後のオリジナルサービスは、皆さんの手で作り上げてください。</p>

<p>Lesson2 以降の各レッスンを簡単に解説しておきます。</p>

<h4>Lesson2 HTML/CSS</h4>

<p><strong>Web ページは HTML/CSS</strong> によって作られます。そのため、Web に関する何かを作ろうと思えば、必ず HTML/CSS の理解が必要となります。</p>

<h4>Lesson3 Bootstrap</h4>

<p>本コースでは、見栄えの良い Web デザインを学ぶことはありません。ただし、最低限の見栄えは整えておきたいところで、そのために Bootstrap を使用します。<strong>Bootstrap を使えば、CSS をあまり書かずにある程度見栄えの良い Web デザインを実現</strong> することができます。</p>

<h4>Lesson4 ターミナル</h4>

<p>次のレッスン以降で学ぶ PHP, MySQL, Git, Laravel, Heroku などは、<strong>ターミナル上での操作が要求</strong>されます。そのため、この段階でターミナルによる操作（コマンド）を学んでおく必要があります。</p>

<h4>Lesson5-8 PHP</h4>

<p>ここから PHP という <strong>Web 用のプログラミング言語</strong> を学びます。PHP を使ってどのように Web アプリケーションを作成するのかの基本を学びます。</p>

<p>ここではデータを保存することがまだできません。</p>

<h4>Lesson9 MySQL</h4>

<p>MySQL は<strong>データベース</strong>です。</p>

<p>PHP と MySQL を連携してデータを保存できる Web アプリケーションの作成を急ぐ前に、ここできっちりと MySQL 単体を使ってデータを保存する方法を把握しておきましょう。</p>

<h4>Lesson10 PHPとMySQLの連携</h4>

<p><strong>PHP と MySQL を連携してデータを保存できる Web アプリケーションを作成</strong>します。</p>

<h4>Lesson11 Git/GitHub</h4>

<p>このレッスンでは、プログラムの <strong>バージョン管理</strong> を行う Git/GitHub を学びます。</p>

<p>また、 Heroku で Web アプリケーションを公開するときには、 Git が必須です。</p>

<p>以降のレッスンでは、Git/GitHub によるバージョン管理を行いながら進めるので、この段階で Git の使い方を知っておきましょう。</p>

<h4>Lesson12 インターネットの仕組み</h4>

<p>Web はインターネットを通じて操作が可能です。まずは <strong>インターネットの仕組みを理解しておくことが、Web アプリケーションを開発する上での最も基礎</strong> となります。</p>

<h4>Lesson13 メッセージボード</h4>

<p>ようやく <strong>Laravel を使って、簡単な掲示板アプリケーションを作成</strong> します。</p>

<p>Laravel は PHP で作られた Web アプリケーションフレームワークです。簡単に言うと、 Laravel を使えば、本格的な Web アプリケーションを作りやすくなるということです。</p>

<p>このレッスンを進めるには、ここまでのレッスンを理解していないといけません。 Laravel を使うと言っても、以前のレッスンで学んだ HTML, CSS, ターミナル, PHP, MySQL の理解は必須です。Gitは補助ツールなので、必須ではありませんが、Herokuで公開するときに必要となります。</p>

<h4>Lesson14 Heroku</h4>

<p>Heroku を使って、<strong>Web アプリケーションを公開</strong>することができます。</p>

<p>ここでは、メッセージボードを公開します。</p>

<h4>Lesson15 Twitterクローン</h4>

<p>メッセージボードはかなり単純な Web アプリケーションでした。</p>

<p>ようやくこのレッスンでは、<strong>Twitterという題材を使って、本格的な Web アプリケーションの作り方</strong>を学びます。</p>

<h4>Lesson16 オリジナルサービス</h4>

<p>最後に、皆さんの手でオリジナルサービスを開発してください。オリジナルサービスには、終わりがありません。</p>
</div><div class="subsection"><h3 class="index" id="chapter-5-2">5.2 本コースのレッスンの進め方</h3><h4>前から順番に進める</h4>

<p>全てのレッスンは、ゴールであるオリジナルWebサービス開発の実現を最適に達成するために、順番通りに配置されています。そのため、前から順に進めてください。</p>

<h4>レッスンがわからないとき</h4>

<p>レッスンの内容が理解できないときもあると思います。そういうときには下記のいずれかを行ってください。</p>

<ul>
  <li>レッスンを何度か読み返してみる</li>
  <li>必要に応じて前のレッスンに戻る</li>
  <li>メンターに質問する</li>
</ul>

<h4>課題に取り組んで理解度チェック</h4>

<p>レッスンはチュートリアル形式となっているものが多いので、そのまま何も考えずにコピーアンドペーストを繰り返すことでレッスンを完了してしまうこともできます。しかし、それではスキルが身に付いたとは言えないでしょう。</p>

<p>そこで、各レッスンにはいくつか課題を設けており、課題に取り組んでいただくことで、理解度をチェックすることができる構成になっております。ちゃんと理解していないとできないものもあるので、レッスン内のチュートリアルをしっかりと理解しながら進めるようにしましょう。</p>
</div><div class="subsection"><h3 class="index" id="chapter-5-3">5.3 プログラミングは簡単か</h3><p>プログラミングが簡単だという意見もありますが、私は一朝一夕で身につくようなものではないと思います。プログラミングの敷居は以前よりも遥かに低くなってきましたが、だからと言って、はじめて学ぶ人にとって簡単だとは言えません。ただ、あまり難しく考え過ぎないことも重要です。簡単や難しいではなく、<strong>素直に新たな学びを受け入れていく姿勢を準備する</strong>ようにしましょう！</p>

<p>また、本コースでは、実践を重要視しています。実践してみて初めて気付くことは多いはずです。プログラミングやその思考方法は実践の中でのみ身に付くものだと思っています。皆さんも実践編をちゃんと理解し、キーボードで実際にプログラミングしながら進めてください。</p>

<p>Webアプリケーションの作成を題材に進めていきますが、基礎知識編では仕組みについて学びます。仕組みをしっかりと理解しているかどうかは、今後の応用力に関わってきます。</p>

<p>最後に、<strong>優秀なメンターが待機していることを忘れないでください</strong>。メンターの方々は多くの現場で活躍し、プログラミングでサービスや製品を作り上げてきた本物の人たちです。今までプログラミングを始めてみては挫折した人も大勢いると思いますが、現場のプロがいつでも質問に答えてくれる環境があることは、初心者にとって非常に重要な環境だと思っております。</p>

<p>本コースを終えたときに、オリジナルのWebサービスを開発できるようになりましょう！</p>
</div></section><section id="chapter-6"><h2 class="index">6. まとめ</h2><div class="subsection"><p>本レッスンでは、本コースで学ぶことの全体像について知りました。Laravel という Web アプリケーションフレームワークで本格的な Web アプリケーションの開発を開始する前に、基礎知識(インターネットの仕組み, HTML/CSS, ターミナル, PHP, MySQL)の理解が必要です。本コースでは、しっかりと基礎から1つずつ学び、段階を踏んで応用（Laravel）へと進みます。</p>
</div></section></div>
</body>
</html>